/* Copyright 2021 roel
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include QMK_KEYBOARD_H
#include "sendstring_belgian.h"

#define SCREENSAVE_DELAY 120000  //configure how long to wait after last activity. 120000ms = 2 mins

// Defines names for use in layer keycodes and the keymap
enum layer_names {
    _BASE,
    _MIDDLE,
    _TOP
};

bool stop_screensaver = false;     //screensaver mode status
uint32_t last_activity_timer = 0;

// Defines key combo's

enum combos { 
  NO_SLEEP,
  
};

const uint16_t PROGMEM kp_dot_kp_minus_no_sleep[] = { KC_KP_DOT, KC_KP_MINUS, COMBO_END};

combo_t key_combos[COMBO_COUNT] = {
  [NO_SLEEP] = COMBO_ACTION(kp_dot_kp_minus_no_sleep),
  
};

//Defines keyboard layout foreach layer

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    /* Base */
    [_BASE] = LAYOUT(
        KC_KP_MINUS, KC_DEL, LCTL(KC_V), LCTL(KC_C), 
	KC_KP_5, KC_KP_4, KC_KP_3, KC_KP_2, KC_KP_1, 
	KC_KP_9, KC_KP_8, KC_KP_7, KC_KP_6, KC_KP_0, KC_KP_DOT, 
	KC_BSPC, KC_SPC, KC_ENT, KC_TAB
    )
};

//Defines prevent screensaver to start

bool process_record_user(uint16_t keycode, keyrecord_t *record) {
     if (record->event.pressed) 
        stop_screensaver = false;  //turn off screensaver mode on any keypress
		return true;
}

void process_combo_event(uint16_t combo_index, bool pressed) { 
    switch (combo_index) {
        case NO_SLEEP:
            if (pressed) {                             //if NO_SLEEP is pressed
                stop_screensaver = true;               //turn on screensaver mode
                last_activity_timer = timer_read32();  //reset timer
            }
            break;
    }
}
 
 
void matrix_scan_user(void) {
    if (stop_screensaver) {                                             //if screensaver mode is active
        if (timer_elapsed32(last_activity_timer) > SCREENSAVE_DELAY) {  //and no key has been pressed in more than SCREENSAVE_DELAY ms
            tap_code16(KC_F13);                                         //  tap F13
            last_activity_timer = timer_read32();                       //  reset last_activity_timer
        }
    }
}
